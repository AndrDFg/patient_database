-------------------------------------------------------------------------------------------------------------------
git config --global --list -- список настроек локального репозитария
git config --list          -- показывает все настройки (глобальные и локальные)

git config --global user.name --настройка имени
git config --global user.email --настройка E-mail
-------------------------------------------------------------------------------------------------------------------
git init --создание локального репозитория
-----------------------------------------------------------------------------------------------------------------
git checkout -b --просмотр веток удаленного репозитория на локальном 

git pull https://github.com/AndrDFg/Working_with_features_and_building_models.git -- обновление между лок и удал. репозиторием (из удаленного в локальный репозиторий)

git clone https://github.com/AndrDFg/Working_with_features_and_building_models.git -- клонирование удаленного репозитория в локальный/Если первоночально созвавался удаленно.

----При первичном создании в локальной машине для последующей удалённой синхронизации, нужно создать пустой удалённый репозиторий. Далее выполнить следующий код: ---- 

git remote add origin <url> -- подключение удаленного пустого репозитория. 
git push -u origin <branch> -- Это отправит вашу локальную ветку main в удаленный репозиторий origin и настроит ее на отслеживание удаленной ветки origin/main.
git branch -u origin/main -- если первично реппозитарий с файлами создан на удаленном сервисе, то отслеживание ветки связывает вашу локальную ветку с соответствующей веткой на удаленном репозитории

-------------------------------------------------------------------------------------------------------------------

git bundle create repo-backup.bundle --all (-- Резервная копия)

rm -rf /путь/к/репозиторию      -- Полное удаление проекта

rm -rf /путь/к/репозиторию/.git -- удалит только Git-историю и метаданные, оставив все файлы проекта нетронутыми.

-------------------------------------------------------------------------------------------------------------------

cd /D/Temp/Учёба/VSC/Working_with_features_and_building_models -- команда cd - доступ к папке где репозиторий

cd .. -- Переход в папку на уровень выше

pwd -- Просмотр текущий путь папки

ls -- список файлов и папок, ls -Force (отображение скрытых файлов и папок в PowerShell)

mkdir новая папка -- создание папки

cat название файла -- просмотр содержимого файла

git cat-file -p c539a91 --чтение файла коммита, дерева...

git cat-file -t c539a91 --определение типа объекта

rm название файла -- удаление файла
--------------------------------------------------------------

git remote -v -- покажет какой удаленный репозиторий привязан к локальному репозиторию  

git add DZ_1_classification_logisticy_regression_and_svm.ipynb -- добавление конкретного файла

git add . -- добавления всех созданных ранее файлов для коммита

git commit -- открытия редактора с целью выполненения соммит 

git commit -m "primery" -- коммит ранее добавенных файлов без открытия редактора  

git commit -a -m "primery" -- добавление всех файлов и их коммит без открытия редактора 

git remote add origin <REMOTE_URL> -- создание удалённого репозитария

git echo "в ковычках можно написать содержимое файла" > название файла -- создание файла в текущей папке репозитария

git checkout кеш коммита(пример 0c3b01572) -- отладка на коммит  

git checkout main -- возрат в ветку master/main (возрат  head)
---------------------------------------------------------------

git branch -- просмотр текущей ветки, просмотр список ветвей

git branch -a --просмотр всех веток включая удалённые

git branch "название ветки"  --создание ветки

git checkout -b "название ветки" -- создание ветки и одновременный переход в неё

git branch -m "название новой ветки"  --переименование текущей ветки

git branch -d "название новой ветки" --удаление ветки (чтобы удалить нужно выйти из ветки)
------------------------------------------------------------------

git merge "название ветки которую нужно соеденить. По аналогии df_main.merge("right="df.присоединяемая таблица"). При этом создается merge commit

git merge -m "объединение ветки с основной веткой + коммит" branch_temp -- (объединение ветки - branch_temp с веткой main)

--------------------------------------------------------------------


